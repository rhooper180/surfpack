# Read in seven one-dimensional data points with 
# two responses per point.
# Data points are on interval [-3,3]
LoadData[name = simple7, file = 'simple7.txt']

# Create a test set with 100 equally-spaced points 
# along the interval [-3,3].
CreateAxes[name = test_axis, bounds = '1 | v -3 3 100']
GridPoints[name = test100, axes = test_axis]

# Create a test set with 100 random points from the
# interval [-3,3].
MonteCarloSample[name = random100, axes = test_axis, 
                 size = 100, seed = 92613]

# Do third-order regression on each response 
CreateSurface[name = cubic_poly_1st, data = simple7, 
	      type = polynomial, order = 3] 
CreateSurface[name = cubic_poly_2nd, data = simple7, 
	      type = polynomial, order = 3, response_index = 1] 

# Evaluate the first model on the equally-spaced
# test data
Evaluate[surface = cubic_poly_1st, data = test100]

# Evaluate the same model on the same data, but instead
# of appending the results as a new response to the existing
# data, create a completely new data variable
Evaluate[name = new100, surface = cubic_poly_1st, data = test100]

# Calculate the mean-squared-error for the models
# on the data that was used to create the approximations 
Fitness[surface = cubic_poly_1st, metric = mean_squared]
Fitness[surface = cubic_poly_2nd, metric = mean_squared]

# Read in data from a hold-out set-- five more points 'true'
# points for each of the two responses
LoadData[name = holdout_data, file = 'holdout.txt']

# Calculate mean-squared_error for the models on holdout set
Fitness[surface = cubic_poly_1st, metric = mean_squared, 
	data = holdout_data]
Fitness[surface = cubic_poly_2nd, metric = mean_squared, 
	data = holdout_data, response_index = 1]

## Create a quadratic fit to the two response and compare
## mean-squared-error on the training and holdout data
## with results from the cubic polynomial fits
CreateSurface[name = quad_poly_1st, data = simple7,
	      type = polynomial, order = 2]
CreateSurface[name = quad_poly_2st, data = simple7,
	      type = polynomial, order = 2, response_index = 1]
Fitness[surface = quad_poly_1st, metric = mean_squared]
Fitness[surface = quad_poly_1st, metric = mean_squared,
	data = holdout_data]
Fitness[surface = quad_poly_2nd, metric = mean_squared]
Fitness[surface = quad_poly_2nd, metric = mean_squared,
	data = holdout_data, response_index = 1]

# Save the results for future reference
Save[data = test100, file = 'test100.txt']
Save[surface = cubic_poly_1st, file = 'cubic_poly_1st.txt']

## Save additional results
Save[data = holdout_data, file = 'holdout_test.txt']
Save[data = random100, file = 'random100.txt']
Save[surface = cubic_poly_2nd, file = 'cubic_poly_2nd.txt']
Save[surface = quad_poly_1st, file = 'quad_poly_1st.txt']
Save[surface = quad_poly_2nd, file = 'quad_poly_2nd.txt']
